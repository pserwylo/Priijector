# 1 "/home/pete/code/liiner/src/Segment.cpp"
# 1 "/home/pete/code/liiner/build_wii_release//"
# 1 "<built-in>"
# 1 "<command-line>"
# 1 "/home/pete/code/liiner/src/Segment.cpp"







# 1 "/home/pete/code/liiner/src/Segment.h" 1
# 11 "/home/pete/code/liiner/src/Segment.h"
# 1 "/home/pete/code/liiner/src/Point.h" 1
# 11 "/home/pete/code/liiner/src/Point.h"
template <class T>
class Point {
public:
 Point() : x( 0 ), y( 0 ) {};
 Point( T x, T y ) : x( x ), y( y ) {};
 virtual ~Point() {};

 T x;
 T y;

 Point<T> operator+( Point<T>& toAdd )
 {
  Point<T> p( this->x + toAdd.x, this->y + toAdd.y );
  return p;
 }

 Point<T> operator-( Point<T>& toSubtract )
 {
  Point<T> p( this->x - toSubtract.x, this->y - toSubtract.y );
  return p;
 }

 void operator+=( Point<T>& toAdd )
 {
  this->x += toAdd.x;
  this->y += toAdd.y;
 }

 void operator-=( Point<T>& toSubtract )
 {
  this->x += toSubtract.x;
  this->y += toSubtract.y;
 }

 Point<T> operator*( double toMul )
 {
  Point<T> p( (T)( this->x * toMul ), (T)( this->y * toMul ) );
  return p;
 }

 Point<T> operator*( int toMul )
 {
  Point<T> p( (T)( this->x * toMul ), (T)( this->y * toMul ) );
  return p;
 }

 Point<T> operator/( double toDiv )
 {
  Point<T> p( (T)( this->x / toDiv ), (T)( this->y / toDiv ) );
  return p;
 }

 Point<T> operator/( int toDiv )
 {
  Point<T> p( (T)( this->x / toDiv ), (T)( this->y / toDiv ) );
  return p;
 }

 void operator*=( double toMul )
 {
  this->x *= toMul;
  this->y *= toMul;
 }

 void operator*=( int toMul )
 {
  this->x *= toMul;
  this->y *= toMul;
 }

 void operator/=( double toDiv )
 {
  this->x /= toDiv;
  this->y /= toDiv;
 }

 void operator/=( int toDiv )
 {
  this->x /= toDiv;
  this->y /= toDiv;
 }

};
# 12 "/home/pete/code/liiner/src/Segment.h" 2
# 20 "/home/pete/code/liiner/src/Segment.h"
class Segment {
public:
 Segment( Point<int> start, Point<int> end );
 Segment( Segment* previous, Point<int> end );
 virtual ~Segment();

 void setNext( Segment* next ) { this->next = next; }
 Segment* getNext() { return this->next; }
 Segment* getPrevious() { return this->previous; }
 Point<int> getStart() { return this->start; }
 Point<int> getEnd() { return this->end; }

private:
 Point<int> start;
 Point<int> end;

 Segment* next;
 Segment* previous;
};
# 9 "/home/pete/code/liiner/src/Segment.cpp" 2

Segment::Segment( Point<int> start, Point<int> end ) :
 start( start ),
 end( end ),
 previous( 0 ),
 next( 0 )
{

}

Segment::Segment( Segment* previous, Point<int> end ) :
 start( previous->getEnd() ),
 end( end ),
 previous( previous )
{
 previous->setNext( this );
}

Segment::~Segment()
{

}
